name: Build and Push Docker Images

on:
  pull_request:
    paths:
      - 'images/**'

  push:
    branches:
      - main
    paths:
      - 'images/**'

  push:
    tags:
      - '*-*'

permissions:
  contents: read
  packages: write

jobs:
  detect-dockerfiles:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.detect.outputs.images }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Detect Dockerfiles
        id: detect
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED=$(git diff --name-only "origin/${{ github.base_ref }}" "origin/${{ github.head_ref }}" -- 'images/*')
          else
            BEFORE_REF="${{ github.event.before }}"
            [ -z "$BEFORE_REF" ] && BEFORE_REF="HEAD~1"
            CHANGED=$(git diff --name-only "$BEFORE_REF" "${{ github.sha }}" -- 'images/*')
          fi
          IMAGES=$(echo "$CHANGED" | grep 'Dockerfile$' | xargs -n1 dirname | sed 's|images/||' | sort -u)
          if [ -n "$IMAGES" ]; then
            JSON=$(printf '%s\n' "$IMAGES" | jq -R . | jq -s .)
          else
            JSON='[]'
          fi
          echo "images=$JSON" >> "$GITHUB_OUTPUT"

  build:
    runs-on: ubuntu-latest
    needs: detect-dockerfiles
    if: needs.detect-dockerfiles.outputs.images != '[]'
    strategy:
      matrix:
        image: ${{ fromJson(needs.detect-dockerfiles.outputs.images) }}
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set lowercase owner for GHCR
        run: |
          echo "OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract base image and version tags
        id: image-tags
        run: |
          DOCKERFILE=images/${{ matrix.image }}/Dockerfile
          FROM_LINE=$(grep -m 1 "^FROM" "$DOCKERFILE")
          FROM_IMG=$(echo "$FROM_LINE" | sed -E 's/^FROM[[:space:]]+//; s/[[:space:]]+AS[[:space:]].*$//; s/^--platform=[^[:space:]]+[[:space:]]+//')
          BASE_IMAGE_TAG=$(echo "$FROM_IMG" | awk -F':' 'NF>1{print $NF; next}{print "latest"}')
          IMAGE_VERSION=$(grep -m1 "ARG SAB_VERSION=" "$DOCKERFILE" | cut -d'=' -f2 || true)
          [ -z "$IMAGE_VERSION" ] && IMAGE_VERSION=$(grep -m1 "ARG IMAGE_VERSION=" "$DOCKERFILE" | cut -d'=' -f2 || true)
          [ -z "$IMAGE_VERSION" ] && IMAGE_VERSION="latest"
          if [[ "${{ github.event_name }}" == "push" && startsWith(github.ref, 'refs/tags/') ]]; then
            TAG_NAME="${{ github.ref_name }}"
            TAG_IMAGE_NAME="${TAG_NAME%%-*}"
            TAG_IMAGE_VERSION="${TAG_NAME#*-}"
            if [[ "$TAG_IMAGE_NAME" == "${{ matrix.image }}" ]]; then
              IMAGE_VERSION="$TAG_IMAGE_VERSION"
            fi
          fi
          echo "base_tag=$BASE_IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image_version=$IMAGE_VERSION" >> $GITHUB_OUTPUT

      - name: Generate revision tag
        id: revision
        run: |
          REVISION_TAG="${{ steps.image-tags.outputs.image_version }}-$(echo ${{ github.sha }} | cut -c1-7)"
          echo "revision_tag=$REVISION_TAG" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: images/${{ matrix.image }}
          file: images/${{ matrix.image }}/Dockerfile
          pull: true
          push: true
          build-args: |
            SAB_VERSION=${{ steps.image-tags.outputs.image_version }}
          platforms: linux/amd64
          cache-from: type=registry,ref=ghcr.io/${{ env.OWNER_LC }}/${{ matrix.image }}:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ env.OWNER_LC }}/${{ matrix.image }}:buildcache,mode=max
          tags: |
            ${{ github.event_name == 'pull_request' && format('ghcr.io/{0}/{1}:pr-{2}', env.OWNER_LC, matrix.image, github.event.number) || '' }}
            ${{ github.event_name != 'pull_request' && format('ghcr.io/{0}/{1}:latest', env.OWNER_LC, matrix.image) || '' }}
            ${{ github.event_name != 'pull_request' && format('ghcr.io/{0}/{1}:{2}', env.OWNER_LC, matrix.image, steps.image-tags.outputs.base_tag) || '' }}
            ${{ github.event_name != 'pull_request' && format('ghcr.io/{0}/{1}:{2}', env.OWNER_LC, matrix.image, steps.image-tags.outputs.image_version) || '' }}
            ${{ github.event_name != 'pull_request' && format('ghcr.io/{0}/{1}:{2}', env.OWNER_LC, matrix.image, steps.revision.outputs.revision_tag) || '' }}
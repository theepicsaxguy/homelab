name: Standardize Pull Request Title

on:
  pull_request:
    types: [opened, edited, synchronize]

permissions:
  contents: write
  pull-requests: write

jobs:
  standardize-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Validate PR Title
        id: semantic-pr-title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
          requireScope: false
          subjectPattern: '^(?![A-Z]).+$'
          subjectPatternError: |
            The subject must start with a lowercase letter.
        continue-on-error: true  # Allow workflow to continue even if this step fails

      - name: Auto-correct PR Title if Invalid
        if: steps.semantic-pr-title.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            let title = pr.title.trim();

            // Define commit types and their corresponding patterns
            const types = {
              feat: /feat|feature|add/i,
              fix: /fix|bugfix|bug/i,
              docs: /docs|documentation/i,
              style: /style|format/i,
              refactor: /refactor/i,
              perf: /perf|performance/i,
              test: /test|testing/i,
              build: /build|compile/i,
              ci: /ci|continuous integration/i,
              chore: /chore|maintenance/i,
              revert: /revert|rollback/i
            };

            // Detect type
            let type = 'fix';  // Default type
            for (const [key, regex] of Object.entries(types)) {
              if (regex.test(title)) {
                type = key;
                break;
              }
            }

            // Detect optional scope
            let scope = '';
            const scopes = {
              k8s: /k8s|kubernetes/i,
              ci: /ci|workflow/i,
              deps: /deps|dependency/i
            };
            for (const [key, regex] of Object.entries(scopes)) {
              if (regex.test(title)) {
                scope = `(${key})`;
                break;
              }
            }

            // Remove existing type & scope to reformat properly
            title = title.replace(/^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\(.+\))?:\s*/i, '');
            title = `${type}${scope}: ${title}`;

            // Ensure the subject starts with a lowercase letter
            title = title.replace(/(:\s*)(\w)/, (_, p1, p2) => p1 + p2.toLowerCase());

            console.log(`Updating PR title to: ${title}`);

            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
              title: title
            });

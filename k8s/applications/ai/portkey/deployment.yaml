apiVersion: apps/v1
kind: Deployment
metadata:
  name: portkey-gateway
  namespace: portkey
  labels:
    app.kubernetes.io/version: "1.12.1"
  annotations:
    deployment.kubernetes.io/revision: "1"
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: portkey-gateway
  template:
    metadata:
      labels:
        app.kubernetes.io/version: "1.12.1"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8787"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: default
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: gateway
          image: portkeyai/gateway:1.12.1
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8787
              protocol: TCP
          envFrom:
            - configMapRef:
                name: portkey-gateway-config
          env:
            - name: AZURE_OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: portkey-provider-secrets
                  key: AZURE_OPENAI_API_KEY
            - name: AZURE_OPENAI_API_BASE
              valueFrom:
                secretKeyRef:
                  name: portkey-provider-secrets
                  key: AZURE_OPENAI_API_BASE
            - name: AZURE_OPENAI_API_VERSION
              valueFrom:
                secretKeyRef:
                  name: portkey-provider-secrets
                  key: AZURE_OPENAI_API_VERSION
            - name: ANTHROPIC_API_KEY
              valueFrom:
                secretKeyRef:
                  name: portkey-provider-secrets
                  key: ANTHROPIC_API_KEY
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: portkey-provider-secrets
                  key: OPENAI_API_KEY
            - name: HUGGINGFACE_API_KEY
              valueFrom:
                secretKeyRef:
                  name: portkey-provider-secrets
                  key: HUGGINGFACE_API_KEY
            - name: CEREBRAS_API_BASE
              valueFrom:
                secretKeyRef:
                  name: portkey-provider-secrets
                  key: CEREBRAS_API_BASE
            - name: ENABLE_CONFIG_ENDPOINT
              value: "true"
            - name: CACHE_TYPE
              value: "memory"
            # npm configuration for read-only filesystem
            - name: NPM_CONFIG_CACHE
              value: "/tmp/.npm"
            - name: NPM_CONFIG_LOGS_DIR
              value: "/tmp"
            - name: NPM_CONFIG_UPDATE_NOTIFIER
              value: "false"
            - name: NPM_CONFIG_FUND
              value: "false"
            # Node.js configuration
            - name: XDG_CONFIG_HOME
              value: "/tmp/.config"
            - name: XDG_CACHE_HOME
              value: "/tmp/.cache"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            capabilities:
              drop:
                - ALL
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
              ephemeral-storage: 100Mi
            limits:
              cpu: 500m
              memory: 512Mi
              ephemeral-storage: 500Mi
          startupProbe:
            httpGet:
              path: /v1/health
              port: 8787
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 10
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /v1/health
              port: 8787
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3
            successThreshold: 1
          livenessProbe:
            httpGet:
              path: /v1/health
              port: 8787
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: var-tmp
              mountPath: /var/tmp
            - name: model-configs
              mountPath: /app/configs
              readOnly: true
            # Additional writable mounts for npm and Node.js
            - name: npm-cache
              mountPath: /home/node/.npm
            - name: node-config
              mountPath: /home/node/.config
            - name: app-cache
              mountPath: /app/cache
            - name: var-log
              mountPath: /var/log
            - name: var-run
              mountPath: /var/run
      volumes:
        - name: tmp
          emptyDir:
            sizeLimit: 100Mi
        - name: var-tmp
          emptyDir:
            sizeLimit: 100Mi
        - name: model-configs
          configMap:
            name: portkey-model-configs
        # Additional writable volumes for npm and Node.js
        - name: npm-cache
          emptyDir:
            sizeLimit: 100Mi
        - name: node-config
          emptyDir:
            sizeLimit: 50Mi
        - name: app-cache
          emptyDir:
            sizeLimit: 200Mi
        - name: var-log
          emptyDir:
            sizeLimit: 100Mi
        - name: var-run
          emptyDir:
            sizeLimit: 10Mi
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      restartPolicy: Always

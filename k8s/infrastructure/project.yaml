apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: infrastructure
  namespace: argocd
  labels:
    app.kubernetes.io/part-of: infrastructure
    app.kubernetes.io/managed-by: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "0"
    homelab.gitops/managed: "true"
    # Allowlisted namespace creation
    argocd.argoproj.io/namespace-resource-allowlist: "[{\"group\":\"\", \"kind\":\"Namespace\"}]"
spec:
  description: Core infrastructure components managed through GitOps

  # Restrict to specific repositories to enhance security
  sourceRepos:
    - 'https://github.com/theepicsaxguy/homelab.git'

  # Explicitly allow specific namespaces
  destinations:
    - server: https://kubernetes.default.svc
      namespace: network
    - server: https://kubernetes.default.svc
      namespace: storage
    - server: https://kubernetes.default.svc
      namespace: auth
    - server: https://kubernetes.default.svc
      namespace: controllers
    - server: https://kubernetes.default.svc
      namespace: argocd
    - server: https://kubernetes.default.svc
      namespace: infrastructure-system
    - server: https://kubernetes.default.svc
      namespace: '*'

  # Define specific cluster-wide resources that can be managed
  clusterResourceWhitelist:
    - group: 'apiextensions.k8s.io'
      kind: 'CustomResourceDefinition'
    - group: 'rbac.authorization.k8s.io'
      kind: 'ClusterRole'
    - group: 'rbac.authorization.k8s.io'
      kind: 'ClusterRoleBinding'
    - group: 'storage.k8s.io'
      kind: 'StorageClass'
    - group: 'admissionregistration.k8s.io'
      kind: '*'
    - group: ''
      kind: 'Namespace'

  # Define namespaced resources that can be managed
  namespaceResourceWhitelist:
    - group: '*'
      kind: '*'

  # Define RBAC roles for project access
  roles:
    - name: admin
      description: Admin role with full permissions
      policies:
        - p, proj:infrastructure:admin, applications, *, infrastructure/*, allow
    - name: readonly
      description: Read-only role for viewing infrastructure
      policies:
        - p, proj:infrastructure:readonly, applications, get, infrastructure/*, allow

  # Define maintenance windows
  syncWindows:
    - kind: allow
      schedule: '* * * * *'
      duration: 24h
      applications:
        - '*'
      manualSync: true

  # Detect orphaned resources
  orphanedResources:
    warn: true

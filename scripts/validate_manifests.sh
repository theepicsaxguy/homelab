#!/bin/bash
# shellcheck disable=SC2034,SC2044

display_help(){
  echo "./$(basename "$0") [ -d | --directory DIRECTORY ] [ -e | --enforce-all-schemas ] [ -h | --help ] [ -sl | --schema-location ]
Script to validate the manifests generated by Kustomize
Where:
  -d  | --directory DIRECTORY  Base directory containing Kustomize overlays
  -e  | --enforce-all-schemas  Enable enforcement of all schemas
  -h  | --help                 Display this help text
  -sl | --schema-location      Location containing schemas"
}

which kustomize && KUSTOMIZE_CMD="kustomize build" || echo "Kustomize not in path; using 'oc kustomize' instead"
which helm && GOT_HELM="--enable-helm" || echo "Helm not in path; skipping kustomizations that use helm"

KUSTOMIZE_CMD="${KUSTOMIZE_CMD:-oc kustomize}"
IGNORE_MISSING_SCHEMAS="--ignore-missing-schemas"
SCHEMA_LOCATION="./openshift-json-schema"
KUSTOMIZE_DIRS="."

init(){
  for i in "${@}"
  do
    case $i in
      -d | --directory )
        shift
        KUSTOMIZE_DIRS="${1}"
        shift
        ;;
      -e | --enforce-all-schemas )
        IGNORE_MISSING_SCHEMAS=""
        shift
        ;;
      -sl | --schema-location )
        shift
        SCHEMA_LOCATION="${1}"
        shift
        ;;
      -h | --help )
        display_help
        exit 0
        ;;
      -*) echo >&2 "Invalid option: " "${@}"
        exit 1
        ;;
    esac
  done
}

kustomization_build(){
  BUILD=${1}

  local KUSTOMIZE_BUILD_OUTPUT
  if [ -n "${GOT_HELM}" ]; then
    KUSTOMIZE_BUILD_OUTPUT=$(${KUSTOMIZE_CMD} "${BUILD}" "${GOT_HELM}")
  else
    if grep -qe '^helmCharts:$' "${BUILD}/kustomization.yaml" ; then
      echo "[SKIP] Helm-based Kustomization"
      return 0
    fi

    KUSTOMIZE_BUILD_OUTPUT=$(${KUSTOMIZE_CMD} "${BUILD}")
  fi

  cmd_response=$?

  if [ $cmd_response -ne 0 ]; then
    if grep -qe '^kind: Component$' "${BUILD}/kustomization.yaml"; then
      echo "[SKIP] Component detected"
      return 0
    fi

    echo "[ERROR] Kustomize build failed for ${BUILD}"
    exit 1
  fi

  echo "[OK] ${BUILD} passed validation"
}

kustomization_process(){
  echo "Validating all Kustomizations..."

  for LINT in $(find "${KUSTOMIZE_DIRS}" -name "kustomization.yaml" -exec dirname {} \;)
  do
    echo "Validating: ${LINT}"
    kustomization_build "${LINT}"
  done

  echo "Kustomize validation check passed!"
}

init "${@}"
kustomization_process

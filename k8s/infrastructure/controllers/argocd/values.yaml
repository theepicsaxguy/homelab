# https://github.com/argoproj/argo-helm/blob/main/charts/argo-cd/values.yaml
configs:
  cm:
    create: true
    application.resourceTrackingMethod: annotation+label
    admin.enabled: false
    url: https://argocd.pc-tips.se
    kustomize.buildOptions: '--enable-helm'
    accounts.kubechecks: apiKey
    # OIDC Configuration
    dex.config: |
      connectors:
      - config:
          issuer: https://sso.pc-tips.se/application/o/argocd/
          clientID: $dex.authentik.clientId
          clientSecret: $dex.authentik.clientSecret
          insecureEnableGroups: true
          scopes:
            - openid
            - profile
            - email
        name: authentik
        type: oidc
        id: authentik

  cmp:
    create: true
    plugins:
      kustomize-build-with-helm:
        generate:
          command: [sh, -c]
          args: [kustomize build --enable-helm]
  params:
    controller.diff.server.side: true
    server.insecure: true
  rbac:
    create: true
    policy.csv: |
      g, ArgoCD Admins, role:admin
      g, ArgoCD Viewers, role:readonly
      g, ArgoCDAdmins, role:admin
      g, ArgoCDViewers, role:readonly
      g, argocd:admin, role:admin
      g, argocd:read_all, role:readonly
      p, role:kubechecks, applications, get,   */*, allow
      p, role:kubechecks, applications, list,  */*, allow
      p, role:kubechecks, applications, sync,  */*, allow
      p, role:kubechecks, applications, create, */*, allow
      p, role:kubechecks, applications, update, */*, allow
      p, role:kubechecks, projects, get,       *, allow
      p, role:kubechecks, projects, update,    *, allow
      p, role:kubechecks, clusters, get, *, allow
      g, kubechecks, role:kubechecks

crds:
  install: true
  # -- Keep CRDs on chart uninstall
  keep: false

controller:
  resources:
    requests:
      cpu: 100m
      memory: 512Mi
    limits:
      cpu: 500m
      memory: 2Gi

dex:
  enabled: true
  resources:
    requests:
      cpu: 10m
      memory: 32Mi
    limits:
      memory: 128Mi

redis:
  resources:
    requests:
      cpu: 100m
      memory: 64Mi
    limits:
      memory: 1Gi

server:
  extensions:
    enabled: true
  service:
    type: LoadBalancer
    httpsPort: 443
    httpsTargetPort: 8443

  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    limits:
      memory: 1Gi

repoServer:
  containerSecurityContext:
    readOnlyRootFilesystem: true
  volumes:
    - name: cmp-kustomize-build-with-helm
      configMap:
        name: argocd-cmp-cm
    - name: cmp-tmp
      emptyDir: {}
  resources:
    requests:
      cpu: 200m
      memory: 512Mi
    limits:
      cpu: 1000m
      memory: 1Gi
  extraContainers:
    - name: kustomize-build-with-helm
      command:
        - argocd-cmp-server
      image:
        '{{ default .Values.global.image.repository .Values.repoServer.image.repository }}:{{ default (include
        "argo-cd.defaultTag" .) .Values.repoServer.image.tag }}'
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        seccompProfile:
          type: RuntimeDefault
        capabilities:
          drop: [ALL]
      volumeMounts:
        - name: plugins
          mountPath: /home/argocd/cmp-server/plugins
        - name: cmp-kustomize-build-with-helm
          mountPath: /home/argocd/cmp-server/config/plugin.yaml
          subPath: kustomize-build-with-helm.yaml
        - mountPath: /tmp
          name: cmp-tmp

applicationSet:
  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    limits:
      memory: 1Gi

notifications:
  enabled: false
  resources:
    requests:
      cpu: 100m
      memory: 64Mi
    limits:
      cpu: 1000m
      memory: 128Mi

extraObjects:
  # ServiceAccount + RBAC
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: argocd-token-generator
      namespace: '{{ .Release.Namespace }}'
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      name: argocd-token-generator
      namespace: '{{ .Release.Namespace }}'
    rules:
      - apiGroups: ['']
        resources: ['secrets']
        verbs: ['create', 'update', 'patch', 'get']
      - apiGroups: ['']
        resources: ['serviceaccounts/token']
        verbs: ['create']
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: argocd-token-generator
      namespace: '{{ .Release.Namespace }}'
    subjects:
      - kind: ServiceAccount
        name: argocd-token-generator
        namespace: '{{ .Release.Namespace }}'
    roleRef:
      kind: Role
      name: argocd-token-generator
      apiGroup: rbac.authorization.k8s.io

  # one-shot token Job (post-install / post-upgrade)
  - apiVersion: batch/v1
    kind: Job
    metadata:
      name: argocd-token-generator
      namespace: '{{ .Release.Namespace }}'
      annotations:
        helm.sh/hook: post-install,post-upgrade
    spec:
      template:
        spec:
          serviceAccountName: argocd-token-generator
          restartPolicy: OnFailure
          containers:
            - name: token-generator
              image: '{{ default .Values.global.image.repository .Values.server.image.repository }}:{{ default (include "argo-cd.defaultTag" .) .Values.global.image.tag }}'
              command:
                - /bin/bash
                - -c
                - |
                  set -e
                  TOKEN=$(argocd account generate-token --account kubechecks \
                          --server argocd-server.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.server.service.httpsTargetPort }} \
                          --insecure --auth-token "$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)")
                  kubectl create secret generic argocd-kubechecks-token \
                    --from-literal=token="$TOKEN" --dry-run=client -o yaml | kubectl apply -f -
              resources:
                requests: { cpu: 50m, memory: 64Mi }
                limits: { cpu: 200m, memory: 128Mi }

  # weekly rotation CronJob
  - apiVersion: batch/v1
    kind: CronJob
    metadata:
      name: argocd-token-rotator
      namespace: '{{ .Release.Namespace }}'
    spec:
      schedule: '0 2 * * 0'
      jobTemplate:
        spec:
          template:
            spec:
              serviceAccountName: argocd-token-generator
              restartPolicy: OnFailure
              containers:
                - name: token-rotator
                  image: '{{ default .Values.global.image.repository .Values.server.image.repository }}:{{ default (include "argo-cd.defaultTag" .) .Values.global.image.tag }}'
                  command:
                    - /bin/bash
                    - -c
                    - |
                      NEW_TOKEN=$(argocd account generate-token --account kubechecks \
                                  --server argocd-server.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.server.service.httpsTargetPort }} \
                                  --insecure --auth-token "$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)")
                      kubectl patch secret argocd-kubechecks-token --type='json' \
                        -p='[{"op":"replace","path":"/data/token","value":"'$(echo -n ${NEW_TOKEN} | base64 -w0)'"}]'
                  resources:
                    requests: { cpu: 50m, memory: 64Mi }
                    limits: { cpu: 200m, memory: 128Mi }

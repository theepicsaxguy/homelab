# yaml-language-server: $schema=https://goauthentik.io/blueprints/schema.json
---
version: 1
metadata:
  name: Events - vault-write
entries:
  - id: policy
    model: authentik_policies_expression.expressionpolicy
    identifiers:
      name: vault-write
    attrs:
      expression: |
        vault_host = "https://vault.as212024.net"
        vault_auth_path = "k8s-k3s.fsn.as212024.net"
        vault_auth_role = "authentik"
        vault_kv_store = "authentik"
        model_actions = [
            "model_updated",
            "model_created",
        ]
        from authentik.core.models import Token
        def authentik_core_token(pk):
            token = Token.objects.filter(pk=pk).first()
            if not token:
                return []
            if not token.description:
                return []
            calls = [
                {
                    "method": requests.post,
                    "path": f"{vault_kv_store}/data/tokens/{token.description}",
                    "payload": {
                        "data": {
                            "username": token.user.username,
                            "key": token.key,
                        },
                    },
                },
            ]
            return calls
        from authentik.providers.oauth2.models import OAuth2Provider
        def authentik_providers_oauth2_oauth2provider(pk):
            provider = OAuth2Provider.objects.filter(pk=pk).first()
            if not provider:
                return []
            calls = [
                {
                    "method": requests.post,
                    "path": f"{vault_kv_store}/data/providers/oauth2/{provider.name}",
                    "payload": {
                        "data": {
                            "client_id": provider.client_id,
                            "client_secret": provider.client_secret,
                        },
                    },
                },
            ]
            if provider.name == "k8s/k3s.fsn.as212024.net/infra-vault":
                calls += [
                    {
                        "method": requests.post,
                        "path": f"auth/authentik/config",
                        "payload": {
                            "oidc_discovery_url": "https://auth.as212024.net/application/o/vault/",
                            "oidc_client_id": provider.client_id,
                            "oidc_client_secret": provider.client_secret,
                            "default_role": "authentik",
                        },
                    },
                ]
            return calls
        # app -> list of model names
        models = {
            "authentik_core": {
                "token": authentik_core_token,
            },
            "authentik_providers_oauth2": {
                "oauth2provider": authentik_providers_oauth2_oauth2provider,
            },
        }
        event = request.context.get("event", None)
        if not event:
            ak_logger.info("vault_write: no event")
            return False
        if event.action not in model_actions:
            ak_logger.info("vault_write: non-matching action")
            return False
        model_app = event.context["model"]["app"]
        model_name = event.context["model"]["model_name"]
        if model_app not in models or model_name not in models[model_app]:
            ak_logger.info("vault_write: invalid model")
            return False
        data = models[model_app][model_name](event.context["model"]["pk"])
        if data is None:
            ak_logger.info("vault_write: data not available anymore")
            return False
        with open("/var/run/secrets/kubernetes.io/serviceaccount/token", "r") as _token:
            k8s_token = _token.read()
        auth = requests.post(
            f"{vault_host}/v1/auth/{vault_auth_path}/login",
            json={
                "jwt": k8s_token,
                "role": vault_auth_role,
            },
        )
        auth.raise_for_status()
        vault_token = auth.json()["auth"]["client_token"]
        ak_logger.info("vault_write: logged in to vault")
        for d in data:
            response = d["method"](
                f"{vault_host}/v1/{d['path']}",
                json=d["payload"],
                headers={
                    "X-Vault-Token": vault_token,
                },
            )
            ak_logger.info(response.text)
            response.raise_for_status()
        return False
  - id: group
    model: authentik_core.group
    identifiers:
      name: _vault_write

  - id: rule
    model: authentik_events.notificationrule
    identifiers:
      name: vault-write
    attrs:
      severity: alert
      group: !KeyOf group

  - model: authentik_policies.policybinding
    identifiers:
      order: 0
      policy: !KeyOf policy
      target: !KeyOf rule

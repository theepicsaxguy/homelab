apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/instance: home-assistant
    app.kubernetes.io/name: home-assistant
  name: home-assistant
  namespace: home-assistant
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: home-assistant
      app.kubernetes.io/name: home-assistant
  serviceName: home-assistant
  template:
    metadata:
      annotations:
        checksum/hass-configuration: 41d81c4dd388f2b621ca87786005ab0fccf7bbdc6c9653dd4866983af679c63c
        checksum/init-script: 495e927a6986fb8e0bd38f54c81c5cb25cabad179b8c61e53db1ed6405f8007b
      labels:
        app.kubernetes.io/instance: home-assistant
        app.kubernetes.io/name: home-assistant
    spec:
      containers:
      - env:
        - name: TZ
          value: Europe/Stockholm
        image: ghcr.io/home-assistant/home-assistant:2025.7.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: http
            scheme: HTTP
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 2
        name: home-assistant
        ports:
        - containerPort: 8123
          name: http
          protocol: TCP
        - containerPort: 8124
          name: sia
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: http
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          requests:
            memory: "1Gi"
          limits:
            memory: "3Gi"
        securityContext:
          capabilities:
            add:
              - NET_ADMIN     # allows interface promiscuous mode & multicast group joins
              - NET_RAW       # allows open/listen on raw sockets (ARP, SSDP, mDNS, etc.)
              - NET_BROADCAST # allows sending broadcast packets
        volumeMounts:
        - mountPath: /config
          name: home-assistant
        - name: hassio-secrets
          mountPath: /config/secrets.yaml
          subPath: secrets.yaml
          readOnly: true
      initContainers:
      ## Example how to install a custom component declaratively

      # - args:
      #   - |
      #     set -e
      #     echo "Cloning Panasonic CC custom component..."
      #     git clone https://github.com/sockless-coding/panasonic_cc.git /git/panasonic_cc
      #     mkdir -p /config/custom_components
      #     echo "Copying component to /config/custom_components/panasonic_cc"
      #     cp -r /git/panasonic_cc/custom_components/panasonic_cc /config/custom_components/
      #     echo "Setting permissions..."
      #     chown -R 568:568 /config/custom_components/panasonic_cc
      #     echo "Panasonic CC init complete."
      #   command:
      #   - /bin/sh
      #   - -c
      #   image: alpine/git
      #   name: init-panasonic-cc
      #   volumeMounts:
      #   - mountPath: /config
      #     name: home-assistant
      - args:
        - /bin/sh /mnt/init/init.sh
        command:
        - /bin/sh
        - -c
        #env: null
        image: mikefarah/yq:4
        name: setup-config
        securityContext:
          runAsUser: 0
        volumeMounts:
        - mountPath: /mnt/init/init.sh
          name: init-volume
          subPath: init.sh
        - mountPath: /config-templates
          name: config-volume
        - mountPath: /config
          name: home-assistant
      serviceAccountName: home-assistant
      volumes:
      - configMap:
          name: init-script
        name: init-volume
      - configMap:
          name: hass-configuration
        name: config-volume
      - name: hassio-secrets
        secret:
          secretName: hassio-secrets
  volumeClaimTemplates:
  - metadata:
      name: home-assistant
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: longhorn
      resources:
        requests:
          storage: 9Gi